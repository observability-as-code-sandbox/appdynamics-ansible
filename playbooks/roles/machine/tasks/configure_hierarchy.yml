
#todo make reading variables more generic, so that execution does not depend on specific file's content

- name: Get hierarchy file content
  command: "cat {{ hierarchy_file_path }}"
  register: hierarchy_file_content
  ignore_errors: true
  changed_when: false
  when: 
    - hierarchy_file_path is defined
    - ansible_os_family == 'RedHat' or ansible_os_family == 'Debian'

- name: Get  file content
  command: "type {{ hierarchy_file_path }}"
  register: hierarchy_file_content
  ignore_errors: true
  changed_when: false
  when: 
    - hierarchy_file_path is defined
    - ansible_os_family == 'Windows'

- name: Print hierarchy_file_content
  ansible.builtin.debug:
    msg: "hierarchy_file_content is '{{ hierarchy_file_content }}'."

- name: Set values based on hierarchy information
  set_fact:
    metadata_department: "{{ hierarchy_file_content.stdout | regex_search('department:.*\"(.*)\"', '\\1') | first }}"
  ignore_errors: true
  when: 
    - hierarchy_file_content.stdout is defined

#Should be defined already....
- name: Set values based on hierarchy information
  set_fact:
    metadata_OS: "{{ hierarchy_file_content.stdout | regex_search('ansible_os_family:.*\"(.*)\"', '\\1') | first }}"
  ignore_errors: true
  when: 
    - hierarchy_file_content.stdout is defined

- name: Set values based on hierarchy information
  set_fact:
    metadata_TCS: "{{ hierarchy_file_content.stdout | regex_search('metadata_TCS:.*\"(.*)\"', '\\1') | first }}"
  ignore_errors: true
  when: 
    - hierarchy_file_content.stdout is defined

#Should be defined already....
- name: Set values based on hierarchy information
  set_fact:
    metadata_PAAS: "{{ hierarchy_file_content.stdout | regex_search('is_support_group_paas:.*\"(.*)\"', '\\1') | first }}"
  ignore_errors: true
  when: 
    - hierarchy_file_content.stdout is defined

#Not edited - needs to be changed
- name: Create and add items to dictionary
  set_fact: 
      hierarchy_final: "{{ hierarchy_final | default({}) | combine(machine_hierarchy) | combine ({ item.key : item.value }) }}"
  with_items:
    - { 'key': 'primary_application' , 'value': "[\"{{ metadata_primary_application | default('unknown') }}\"]"}
    - { 'key': 'environment' , 'value': "['{{ metadata_environment | default('unknown') }}']"}
    - { 'key': 'os_distribution' , 'value': "['{{ ansible_distribution | default('unknown') }}']"}
    - { 'key': 'os_distribution_version' , 'value': "['{{ ansible_distribution_version | default('unknown') }}']"}

- name: Print hierarchy_final
  ansible.builtin.debug:
    msg: "{{ hierarchy_final }}"

- name: Create and add items to dictionary
  set_fact: 
      hierarchy_final: "{{ hierarchy_final|to_nice_yaml|indent(4)}}"
  when: 
    - hierarchy_final is defined

#todo - where is the hierarchy defined? - Machine-agent-controller-info.xml - Check destination
- name: Update Machine Agent Hierarchy values - Linux OS
  become: true
  template:
    src: templates/machine-agent-controller-info.xml.j2
    # dest: '{{ machine_agent_dest_folder_linux }}/extensions/ServerMonitoring/conf/ServerMonitoring.yml'
    owner: "{{ appdynamics_user }}"
    group: "{{ appdynamics_user }}"
    mode: 0755
  changed_when: false
  when: 
    - hierarchy_final is defined
    - ansible_os_family == 'RedHat' or ansible_os_family == 'Debian'

- name: Update Machine Agent Hierarchy values - Win OS
  template:
    src: templates/machine-agent-controller-info.xml.j2
    # dest: '{{ machine_agent_dest_folder_windows }}/extensions/ServerMonitoring/conf/ServerMonitoring.yml'
    force: yes
  changed_when: false
  when: 
    - hierarchy_final is defined
    - ansible_os_family == 'Windows'

      